 public partial class ConsoleCommandConfigs
    {
        [JsonProperty("Commands")]
        public Command[] Commands { get; set; }
    }

    public partial class Command
    {
        [JsonProperty("UserCommands")]
        public string[] UserCommands { get; set; }

        [JsonProperty("Options")]
        public Option[] Options { get; set; }
    }

    public partial class Option
    {
        [JsonProperty("Width")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Width { get; set; }

        [JsonProperty("Color")]
        public string Color { get; set; }

        [JsonProperty("Wrap", NullValueHandling = NullValueHandling.Ignore)]
        public string Wrap { get; set; }

        [JsonProperty("Heading")]
        public string Heading { get; set; }

        [JsonProperty("ValueProperty")]
        public string ValueProperty { get; set; }
    }



	///////// Serialization/Deserialization //////////////////
	  public partial class ConsoleCommandConfigs
    {
        public static ConsoleCommandConfigs FromJson(string json) => JsonConvert.DeserializeObject<ConsoleCommandConfigs>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this ConsoleCommandConfigs self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters = {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}